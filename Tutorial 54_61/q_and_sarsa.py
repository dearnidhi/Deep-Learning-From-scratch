# -*- coding: utf-8 -*-
"""Q and SARSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1efvCWG_Qcr36j89hdb804rIOTT-bIs32
"""

# Q Learning in Python

import gym
import numpy as np
import time

env = gym.make('FrozenLake-v0')
STATES = env.observation_space.n
ACTIONS = env.action_space.n

Q = np.zeros((STATES, ACTIONS))

STATES

ACTIONS

#  4 * 16
Q

EPISODES = 3000 # how many times to run the enviornment from the beginning
MAX_STEPS = 100  # max number of steps allowed for each run of enviornment
LEARNING_RATE = 0.81  # learning rate
GAMMA = 0.96
RENDER = False # if you want to see training set to true
epsilon = 0.9

rewards = []
for episode in range(EPISODES):

   #get the starting state in Evr. after reset
  state = env.reset()
  for _ in range(MAX_STEPS):  #Explore the env. till the max step;
    
    if RENDER:
      env.render()

    if np.random.uniform(0, 1) < epsilon:
      #Random action in Envr.
      action = env.action_space.sample()  
    else:
      #next state of agent
      action = np.argmax(Q[state, :])

    next_state, reward, done, _ = env.step(action)
    #we dont' care about the info values _, that's why we ignore it ...

    Q[state, action] = Q[state, action] + LEARNING_RATE * (reward + GAMMA * np.max(Q[next_state, :]) - Q[state, action])

    state = next_state

    if done: 
      rewards.append(reward)
      epsilon -= 0.001
      break  # reached goal

print(Q)
print(f"Average reward: {sum(rewards)/len(rewards)}:")
# and now we can see our Q values!

env.render()

# we can plot the training progress and see how the agent improved
import matplotlib.pyplot as plt

def get_average(values):
  return sum(values)/len(values)

avg_rewards = []
for i in range(0, len(rewards), 100):
  avg_rewards.append(get_average(rewards[i:i+100])) 

plt.plot(avg_rewards)
plt.ylabel('average reward')
plt.xlabel('episodes (100\'s)')
plt.show()









#---Sarsa Algorithm----

import numpy as np 
import gym

env = gym.make('FrozenLake-v0')

#Defining the different parameters 
epsilon = 0.9
total_episodes = 10000
max_steps = 100
alpha = 0.85
gamma = 0.95
  
#Initializing the Q-matrix 
Q = np.zeros((env.observation_space.n, env.action_space.n))

Q

#Function to choose the next action 
def choose_action(state): 
    action=0
    if np.random.uniform(0, 1) < epsilon: 
        action = env.action_space.sample() 
    else: 
        action = np.argmax(Q[state, :]) 
    return action 
  
#Function to learn the Q-value 
def update(state, state2, reward, action, action2): 
    predict = Q[state, action] 
    target = reward + gamma * Q[state2, action2] 
    Q[state, action] = Q[state, action] + alpha * (target - predict)

#Initializing the reward 
reward=0
  
# Starting the SARSA learning 
for episode in range(total_episodes): 
    t = 0
    state1 = env.reset() 
    action1 = choose_action(state1) 
  
    while t < max_steps: 
        #Visualizing the training 
        env.render() 
          
        #Getting the next state 
        state2, reward, done, info = env.step(action1) 
  
        #Choosing the next action 
        action2 = choose_action(state2) 
          
        #Learning the Q-value 
        update(state1, state2, reward, action1, action2) 
  
        state1 = state2 
        action1 = action2 
          
        #Updating the respective vaLues 
        t += 1
        reward += 1
          
        #If at the end of learning process 
        if done: 
            break

#Evaluating the performance 
print ("Performace : ", reward/total_episodes) 
  
#Visualizing the Q-matrix 
print(Q)

